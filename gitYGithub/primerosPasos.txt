Los sistemas de control de versiones:
*Nos ayudan a mantener un historial de cambios;
*Nos ayudan a tener control sobre cada cambio en el código;
*Nos ayudan a que un cambio de una persona no influya en el cambio realizado por otra;
*Etc

git init inicializa un repositorio en el directorio donde se ejecuta el comando. Desde este comando, Git podrá administrar los cambios realizados en los archivos.

git status nos sirve para analizar el estado de nuestro repositorio.
algunos de los terminos que podemos obtener al tirar un git status, son los siguientes:
--HEAD: Estado actual de nuestro código, es decir, donde nos colocó Git
--Working tree: Lugar donde los archivos realmente están siendo almacenados
--index: Lugar donde Git almacena lo que será commiteado, es decir, la ubicación entre el working tree y el repositorio de Git en sí.

Para más información sobre los posibles status, visitar la siguiente documentación: 

https://git-scm.com/book/es/v2/Fundamentos-de-Git-Guardando-cambios-en-el-Repositorio

git add no ayuda para agregar los cambios que hemos hecho en el repositorio.

git commit nos ayuda a comentar los cambios que se estan haciendo en el repositorio.

git config --global user.email "email usuario" nos ayuda con la configiracion de git

Antes de cualquier interacción con git, es necesario informar quién eres para que almacene correctamente los datos del autor de cada uno de los cambios en el código.
git config --local user.name "Tu nombre aquí" 
git config --local user.email "Tu@email.aqui”

*se puede usar --local, que sera la configuración local para ese proyecto, o --global para todos los proyectos que se realizaran en la compuadora

//para ver nuestras configuraciones, podemos usar el comando git config user.name, o user.email, según lo que necesitemos visualizar

para más detalles de configuración, visitar:
https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration



git log nos sirve para ver el historial de cambios realizados en nuestro proyecto, si a este comando le agregamos "--oneline", podemos ver la informacion en una sola linea, por el contrario, si queremos ver más información, debemos usar la opcion "-p", para salir de este modo, nos vamos al final y tecleamos :q .

para más informacion al respecto, podemos visitar: https://devhints.io/git-log 

git init --bare 
Con este comando creamos un repositorio que no tendrá la working tree, o sea, no contendrá una copia de nuestros archivos. Como el repositorio servirá solo como servidor, para que otros miembros del equipo sincronicen sus trabajos, disminuimos espacio de almacenamiento de esta forma.

git remote add nombredelRepo pathdelRepo //agregar un servidor 
fetch es desde donde y push es hacia donde, con remote enviamos información a un servidor remoto 

git clone nos sirve para clonar nuestros repositorios, trae un repositorio remoto a nuestra computadora, creando un repo local
git clone pathdelrepositorio nombredelarchivo

git push desdedonde haciadonde //envia datos

git pull //traer los archivos desde un repo remoto, actaliza.

Las branches ("ramas") se utilizan para desarrollar funcionalidades aisladas entre sí. La branch master es la branch "predeterminada" cuando creas un repositorio.

Es interesante separar el desarrollo de funcionalidades en diferentes branches, para que los cambios en el código de una no influyan en el funcionamiento de otra.

git branch //indica el nombre de las ramas

git branch name // crea nuevas ramas

git checkout branchname // cambia la rama sobre la que estamos trabajando

git checkout -b branchname //nos deja crear una nueva rama y movernos en automaticoa ella
visitar la siguiente página para ver de forma visual las ramas:
git-school.github.io/visualizing-git/

La descripción del comando git checkout --help, en una traducción libre es: “Actualizar los archivos en working tree para que queden en la versión especificada. […]”.

Básicamente, podemos dejar nuestro código en el estado de último commit de una branch, de un commit específico, o incluso tags (que veremos más adelante).

git merge branchenamme //trae las modificaciones de la rama que estamos invocandoa la rama sobre la que escribimos el comando

De esta forma colocaremos el HEAD en la Branch master, o sea, haremos que nuestro código esté en el estado que lo dejamos con el últimocommit en master. Después, uniremos el trabajo de la Branch titulo con la Branch actual (master).

git rebase  //une con la branch actual

El merge junta los trabajos y genera un merge commit. El rebase aplica los commits de otra Branch en la Branch actual.
¡Opción correcta! Con esto evitamos los commits de merge. Hay una larga discusión sobre lo que es “mejor”: rebase o merge; Estudie, busque, y genere sus propias conclusiones. Acá tienen un artículo (de miles de otros) que hablan sobre el asunto: https://medium.com/datadriveninvestor/git-rebase-vs-merge-cc5199edd77c.

¡Opción correcta! Con el git restore deshacemos una modificación que aún no fue agregada al index o stage, o sea, antes de hacer git add. Después de agregar con git add, para deshacer una modificación, necesitamos sacarlo de este estado, con git restore --staged. Ahora, si ya hicimos el commit, el comando git revert puede salvarnos.

Vimos cómo podemos utilizar git stash para almacenar temporalmente algunas de nuestras modificaciones.
 Cuando necesitamos pausar el desarrollo de alguna funcionalidad, o corrección, antes de finalizar, y tal vez no sea interesante realizar un commit, pues nuestro código puede no estar funcionando aún. En este caso es interesante guardar el trabajo para poder volver a él después.

 Que Git puede ayudarnos a deshacer cambios que no vamos a utilizar;
Que, para deshacer un cambio antes de agregarlo para commit(con git add), podemos usar el comando git restore <archivos>;
Que, para deshacer un cambio después de agregarlo paracommit, primero debemos ejecutar git restore --staged <archivos> y luego podemos deshacerlos con git restore <files>;
Que, para revertir los cambios realizados en un commit, el comando git revert puede ser la solución;
Que el comando git revert genera un nuevo commit informando que los cambios fueron deshechos;
Que, para guardar un trabajo y reanudarlo más tarde, podemos usar git stash;
Que, para ver qué cambios hay en el stash, podemos usar el comando git stash list;
Que, con el comando git stash apply <número>, podemos aplicar un cambio específico al stash;
Que el comando git stash drop <número> elimina un elemento determinado del stash;
Que el comando git stash pop aplica y elimina el último cambio que se agregó alstash;
Que git checkout sirve para dejar la copia del código de muestra aplicación en el estado que queremos:
git checkout <branch> deja el código en el estado de una branchcon el nombre <branch>;
git checkout <hash> deja el código en el estado de commit con el hash <hash>.

git diff //buscar la diferencia entre dos commits, usando los hash

git tag -a tag'sname // colocar una tag, la tag genera un relase

Que es posible ver qué cambios se hicieron en cada archivo, con el comando git diff;
Que, al escribir sólo git diff, vemos los cambios en nuestros archivos que no se agregaron para commit (con git add);
Que es posible comparar cambios entre dos ramas con git diff <branch1> .. <branch2>
Que es posible comparar los cambios realizados entre un commit y otro, usando el comando git diff <commit1> .. <commit2>;
Que Git nos permite guardar “marcos” de nuestra aplicación, por ejemplo, generando versiones, a través de git tag;
Que el comando git tag -a se usa para generar una nueva tag;
Las Releases de GitHub, que son generadas para cada tag de Git que creamos en nuestro repositorio.
